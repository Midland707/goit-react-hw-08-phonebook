{"version":3,"file":"static/js/856.128d6f0d.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/form-control/dist/chunk-RN6VKE3K.mjs","components/LoginForm.jsx","pages/LoginPage.jsx","../node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs"],"sourcesContent":["import {\n  useFormControlContext,\n  useFormControlStyles\n} from \"./chunk-6ZNYZUDD.mjs\";\n\n// src/form-label.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */ jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : { ref, ...rest };\n  return /* @__PURE__ */ jsxs(\n    chakra.label,\n    {\n      ...ownProps,\n      className: cx(\"chakra-form__label\", props.className),\n      __css: {\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles\n      },\n      children: [\n        children,\n        (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator\n      ]\n    }\n  );\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(\n  function RequiredIndicator2(props, ref) {\n    const field = useFormControlContext();\n    const styles = useFormControlStyles();\n    if (!(field == null ? void 0 : field.isRequired))\n      return null;\n    const className = cx(\"chakra-form__required-indicator\", props.className);\n    return /* @__PURE__ */ jsx(\n      chakra.span,\n      {\n        ...field == null ? void 0 : field.getRequiredIndicatorProps(props, ref),\n        __css: styles.requiredIndicator,\n        className\n      }\n    );\n  }\n);\nRequiredIndicator.displayName = \"RequiredIndicator\";\n\nexport {\n  FormLabel,\n  RequiredIndicator\n};\n","import {\n  Input,\n  Button,\n  Box,\n  Text,\n  FormLabel,\n  FormControl,\n} from '@chakra-ui/react';\n\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/authorization/operations';\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    console.log('form = ', form);\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n  return (\n    <Box w=\"500px\" mr=\"auto\" ml=\"auto\">\n      <Text color=\"white\" fontSize=\"50px\" textAlign=\"center\">\n        Sign in\n      </Text>\n      <Text color=\"white\" fontSize=\"20px\" textAlign=\"center\">\n        Sign in and start managing your contacts!\n      </Text>\n      <FormControl\n        onSubmit={handleSubmit}\n        autoComplete=\"off\"\n        color=\"white\"\n        w=\"300px\"\n        mr=\"auto\"\n        ml=\"auto\"\n      >\n        <FormLabel margin=\"0px\" marginTop=\"20px\">\n          Email\n          <Input\n            placeholder=\". . . email\"\n            type=\"email\"\n            name=\"email\"\n            pattern=\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$\"\n            title=\"email@dnsname\"\n            required\n          />\n        </FormLabel>\n        <FormLabel margin=\"0px\" marginTop=\"20px\">\n          Password\n          <Input\n            placeholder=\". . . password\"\n            type=\"password\"\n            name=\"password\"\n            pattern=\".{6,}\"\n            title=\"Six or more characters\"\n            required\n          />\n        </FormLabel>\n        <Button\n          type=\"submit\"\n          w=\"300px\"\n          marginTop=\"20px\"\n          color=\"white\"\n          bg=\"#20DF7F\"\n        >\n          Log In\n        </Button>\n      </FormControl>\n    </Box>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { LoginForm } from 'components/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n","// src/text.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const { className, align, decoration, casing, ...rest } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */ jsx(\n    chakra.p,\n    {\n      ref,\n      className: cx(\"chakra-text\", props.className),\n      ...aliasedProps,\n      ...rest,\n      __css: styles\n    }\n  );\n});\nText.displayName = \"Text\";\n\nexport {\n  Text\n};\n"],"names":["FormLabel","forwardRef","passedProps","ref","_a","styles","useStyleConfig","props","omitThemingProps","children","className","_props$requiredIndica","requiredIndicator","jsx","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","_objectWithoutProperties","_excluded","field","useFormControlContext","ownProps","getLabelProps","_objectSpread","jsxs","chakra","cx","__css","display","textAlign","isRequired","displayName","useFormControlStyles","getRequiredIndicatorProps","LoginForm","dispatch","useDispatch","_jsxs","Box","w","mr","ml","_jsx","Text","color","fontSize","FormControl","onSubmit","e","preventDefault","form","currentTarget","console","log","logIn","email","elements","value","password","reset","autoComplete","margin","marginTop","Input","placeholder","type","name","pattern","title","required","Button","bg","_Fragment","Helmet","_omitThemingProps","align","decoration","casing","aliasedProps","compact","textDecoration","textTransform"],"sourceRoot":""}